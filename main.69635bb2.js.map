{"version":3,"sources":["scripts/main.js"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","GRID_SIZE","GRID_COUNT","CELL_SIZE","GAP","Grid","gridElement","style","setProperty","concat","cells","push","Cell","Math","floor","value","emptyCells","filter","cell","isEmpty","random","reduce","cellGrid","x","y","groupCellsByColumn","map","column","reverse","groupCellsByRow","row","id","document","createElement","classList","add","append","cellElement","get","tile","mergedTile","newTile","hasMergedTile","setXY","setValue","addMergeAnimation","removeFromDom","Tile","tileElement","textContent","remove","gameBoard","getElementById","startButton","querySelector","scoreElement","winMessage","loseMessage","addEventListener","startGame","grid","score","Directions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","resetGame","allTiles","querySelectorAll","forEach","getRandomEmptyCell","linkTile","updateScoreValue","hideStartMessage","updateStartButton","setupInputOnce","gameOver","arguments","window","handleInput","once","e","preventDefault","canUp","moveUp","canDown","moveDown","canLeft","moveLeft","canRight","moveRight","keys","some","k","checkWinCondition","checkLoseCondition","isWin","isLose","slideTiles","groupCellsByColumnReverse","groupCellsByRowReverse","groups","group","slideTilesInGroupe","mergeTiles","targetCell","j","canAccept","setMergedTile","unlinkTile","canMove","grp","canMoveInGroupe","index"],"mappings":"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","file":"main.69635bb2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst GRID_SIZE = 4;\r\nconst GRID_COUNT = GRID_SIZE * GRID_SIZE;\r\nconst CELL_SIZE = 12;\r\nconst GAP = 1;\r\n\r\nclass Grid {\r\n  constructor(gridElement) {\r\n    gridElement.style.setProperty('--grid-size', `${GRID_SIZE}`);\r\n    gridElement.style.setProperty('--cell-size', `${CELL_SIZE}vmin`);\r\n    gridElement.style.setProperty('--gap-size', `${GAP}vmin`);\r\n\r\n    this.cells = [];\r\n\r\n    for (let i = 0; i < GRID_COUNT; i++) {\r\n      this.cells.push(\r\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE), i)\r\n      );\r\n    }\r\n  }\r\n\r\n  getRandomEmptyCell() {\r\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty);\r\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\r\n\r\n    return emptyCells[randomIndex];\r\n  }\r\n\r\n  groupCellsByColumn() {\r\n    const groupArray = this.cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\r\n      cellGrid[cell.x][cell.y] = cell;\r\n\r\n      return cellGrid;\r\n    }, []);\r\n\r\n    return groupArray;\r\n  }\r\n\r\n  groupCellsByColumnReverse() {\r\n    return this.groupCellsByColumn().map((column) => [...column].reverse());\r\n  }\r\n\r\n  groupCellsByRow() {\r\n    const groupArray = this.cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\r\n      cellGrid[cell.y][cell.x] = cell;\r\n\r\n      return cellGrid;\r\n    }, []);\r\n\r\n    return groupArray;\r\n  }\r\n\r\n  groupCellsByRowReverse() {\r\n    return this.groupCellsByRow().map((row) => [...row].reverse());\r\n  }\r\n}\r\nclass Cell {\r\n  constructor(gridElement, x, y, id) {\r\n    const cell = document.createElement('div');\r\n\r\n    cell.classList.add('cell');\r\n    gridElement.append(cell);\r\n    this.cellElement = cell;\r\n    this.id = id;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  get isEmpty() {\r\n    return !this.tile;\r\n  }\r\n\r\n  get hasMergedTile() {\r\n    return this.mergedTile;\r\n  }\r\n\r\n  canAccept(newTile) {\r\n    return (\r\n      this.isEmpty || (!this.hasMergedTile && this.tile.value === newTile.value)\r\n    );\r\n  }\r\n\r\n  linkTile(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.tile = tile;\r\n  }\r\n\r\n  setMergedTile(tile) {\r\n    tile.setXY(this.x, this.y);\r\n    this.mergedTile = tile;\r\n  }\r\n\r\n  mergeTiles() {\r\n    this.tile.setValue(this.tile.value + this.mergedTile.value);\r\n    this.tile.addMergeAnimation();\r\n\r\n    this.mergedTile.removeFromDom();\r\n    this.mergedTile = null;\r\n  }\r\n\r\n  unlinkTile() {\r\n    this.tile = null;\r\n  }\r\n}\r\n\r\nclass Tile {\r\n  constructor(gridElement) {\r\n    this.tileElement = document.createElement('div');\r\n    this.value = 0;\r\n    this.setValue(Math.random() > 0.8 ? 4 : 2);\r\n    gridElement.append(this.tileElement);\r\n  }\r\n\r\n  setXY(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    this.tileElement.style.setProperty('--x', `${this.x}`);\r\n    this.tileElement.style.setProperty('--y', `${this.y}`);\r\n  }\r\n\r\n  setValue(value) {\r\n    this.value = value;\r\n    this.tileElement.classList = [];\r\n    this.tileElement.classList.add('tile');\r\n    this.tileElement.classList.add(`tile--${this.value}`);\r\n    this.tileElement.textContent = `${this.value}`;\r\n  }\r\n\r\n  removeFromDom() {\r\n    this.tileElement.remove();\r\n  }\r\n\r\n  addMergeAnimation() {\r\n    this.tileElement.classList.add(`tile--merge`);\r\n  }\r\n}\r\n\r\nconst gameBoard = document.getElementById('game-board');\r\nconst startButton = document.querySelector('.button.start');\r\nconst scoreElement = document.querySelector('.game-score');\r\nconst winMessage = document.querySelector('.message-win');\r\nconst loseMessage = document.querySelector('.message-lose');\r\n\r\nstartButton.addEventListener('click', startGame);\r\n\r\nconst grid = new Grid(gameBoard);\r\n\r\nlet score = 0;\r\nconst Directions = {\r\n  ArrowUp: 'ArrowUp',\r\n  ArrowDown: 'ArrowDown',\r\n  ArrowLeft: 'ArrowLeft',\r\n  ArrowRight: 'ArrowRight',\r\n};\r\n\r\nfunction startGame() {\r\n  resetGame();\r\n}\r\n\r\nfunction resetGame() {\r\n  const allTiles = gameBoard.querySelectorAll('.tile');\r\n\r\n  grid.cells.forEach((cell) => (cell.tile = null));\r\n  allTiles.forEach((tile) => tile.remove());\r\n\r\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\r\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\r\n\r\n  winMessage.classList.add('hidden');\r\n  loseMessage.classList.add('hidden');\r\n\r\n  score = 0;\r\n\r\n  updateScoreValue();\r\n\r\n  startButton.textContent = 'Restart';\r\n\r\n  hideStartMessage();\r\n  updateStartButton();\r\n  setupInputOnce();\r\n}\r\n\r\nfunction hideStartMessage() {\r\n  const startMessage = document.querySelector('.message-start');\r\n\r\n  startMessage.classList.add('hidden');\r\n}\r\n\r\nfunction updateStartButton(gameOver = false) {\r\n  startButton.textContent = gameOver ? 'Start' : 'Restart';\r\n\r\n  if (!gameOver) {\r\n    startButton.classList.add('restart');\r\n  } else {\r\n    startButton.classList.remove('restart');\r\n  }\r\n\r\n  startButton.addEventListener('click', startGame);\r\n}\r\n\r\nfunction updateScoreValue(value = 0) {\r\n  score += value;\r\n  scoreElement.textContent = `${score}`;\r\n}\r\n\r\nfunction setupInputOnce() {\r\n  window.addEventListener('keydown', handleInput, { once: true });\r\n}\r\n\r\nfunction handleInput(e) {\r\n  switch (e.key) {\r\n    case Directions.ArrowUp:\r\n      e.preventDefault();\r\n\r\n      if (!canUp()) {\r\n        setupInputOnce();\r\n\r\n        return;\r\n      }\r\n      moveUp();\r\n      break;\r\n    case Directions.ArrowDown:\r\n      e.preventDefault();\r\n\r\n      if (!canDown()) {\r\n        e.preventDefault();\r\n        setupInputOnce();\r\n\r\n        return;\r\n      }\r\n      moveDown();\r\n      break;\r\n    case Directions.ArrowLeft:\r\n      e.preventDefault();\r\n\r\n      if (!canLeft()) {\r\n        setupInputOnce();\r\n\r\n        return;\r\n      }\r\n      moveLeft();\r\n      break;\r\n    case Directions.ArrowRight:\r\n      e.preventDefault();\r\n\r\n      if (!canRight()) {\r\n        setupInputOnce();\r\n\r\n        return;\r\n      }\r\n      moveRight();\r\n      break;\r\n    default:\r\n      setupInputOnce();\r\n      break;\r\n  }\r\n\r\n  if (Object.keys(Directions).some((k) => e.key === k)) {\r\n    const newTile = new Tile(gameBoard);\r\n\r\n    grid.getRandomEmptyCell().linkTile(newTile);\r\n  }\r\n\r\n  if (checkWinCondition() || checkLoseCondition()) {\r\n    return;\r\n  }\r\n  setupInputOnce();\r\n}\r\n\r\nfunction checkWinCondition() {\r\n  const isWin = grid.cells.some((cell) => {\r\n    return cell.tile && cell.tile.value === 2048;\r\n  });\r\n\r\n  if (isWin) {\r\n    winMessage.classList.remove('hidden');\r\n    updateStartButton(true);\r\n  }\r\n\r\n  return isWin;\r\n}\r\n\r\nfunction checkLoseCondition() {\r\n  const isLose = !canUp() && !canDown() && !canLeft() && !canRight();\r\n\r\n  if (isLose) {\r\n    loseMessage.classList.remove('hidden');\r\n  }\r\n\r\n  return isLose;\r\n}\r\n\r\nfunction moveUp() {\r\n  slideTiles(grid.groupCellsByColumn());\r\n}\r\n\r\nfunction moveDown() {\r\n  slideTiles(grid.groupCellsByColumnReverse());\r\n}\r\n\r\nfunction moveLeft() {\r\n  slideTiles(grid.groupCellsByRow());\r\n}\r\n\r\nfunction moveRight() {\r\n  slideTiles(grid.groupCellsByRowReverse());\r\n}\r\n\r\nfunction slideTiles(groups) {\r\n  if (!groups) {\r\n    return;\r\n  }\r\n\r\n  groups.forEach((group) => slideTilesInGroupe(group));\r\n\r\n  grid.cells.forEach((cell) => {\r\n    if (cell.hasMergedTile) {\r\n      cell.mergeTiles();\r\n      updateScoreValue(cell.tile.value);\r\n    }\r\n  });\r\n}\r\n\r\nfunction slideTilesInGroupe(group) {\r\n  for (let i = 1; i < group.length; i++) {\r\n    if (group[i].isEmpty) {\r\n      continue;\r\n    }\r\n\r\n    const cell = group[i];\r\n    let targetCell;\r\n    let j = i - 1;\r\n\r\n    while (j >= 0 && group[j].canAccept(cell.tile)) {\r\n      targetCell = group[j];\r\n      j--;\r\n    }\r\n\r\n    if (!targetCell) {\r\n      continue;\r\n    }\r\n\r\n    if (targetCell.isEmpty) {\r\n      targetCell.linkTile(cell.tile);\r\n    } else {\r\n      targetCell.setMergedTile(cell.tile);\r\n    }\r\n\r\n    cell.unlinkTile();\r\n  }\r\n}\r\n\r\nfunction canUp() {\r\n  return canMove(grid.groupCellsByColumn());\r\n}\r\n\r\nfunction canDown() {\r\n  return canMove(grid.groupCellsByColumnReverse());\r\n}\r\n\r\nfunction canLeft() {\r\n  return canMove(grid.groupCellsByRow());\r\n}\r\n\r\nfunction canRight() {\r\n  return canMove(grid.groupCellsByRowReverse());\r\n}\r\n\r\nfunction canMove(group) {\r\n  return group.some((grp) => canMoveInGroupe(grp));\r\n}\r\n\r\nfunction canMoveInGroupe(group) {\r\n  return group.some((cell, index) => {\r\n    if (index === 0) {\r\n      return false;\r\n    }\r\n\r\n    if (cell.isEmpty) {\r\n      return false;\r\n    }\r\n\r\n    const targetCell = group[index - 1];\r\n\r\n    return targetCell.canAccept(cell.tile);\r\n  });\r\n}\r\n"]}